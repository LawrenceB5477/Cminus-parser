--- fixed grammar --- 

program -> declaration-list                                                                         {}
declaration-list -> declaration declaration-list`                                                   {}
declaration-list` -> declaration declaration-list` | empty                                          {}
declaration -> type-specifier ID declaration`                                                       {}
declaration` -> var-declaration` | ( params ) compound-stmt                                         { ( or ; [ }
var-declaration -> type-specifier ID var-declaration`                                               { }
var-declaration` -> ; | [ NUM ] ;                                                                   { ; or [ }
type-specifier -> int | void                                                                        { int void }
params -> int ID param` param-list` | void params`                                                  { int or void }
params` -> ID param` param-list` | empty                                                            { ID or empty }
param-list` -> , type-specifier ID param` param-list` | empty                                       { , or empty }
param` -> [ ] | empty                                                                               { [ or empty}
compound-stmt -> { local-declarations statement-list }                                              { { }
local-declarations -> var-declaration local-declarations | empty                                    { int or void}
statement-list -> statement statement-list | empty                                                  { empty or }
statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt        { else | { | if | while | return } 
expression-stmt -> expression ; | ;                                                                 
selection-stmt -> if ( expression ) statmement selection-stmt`                                     
selection-stmt` -> else statement | empty                                                           
iteration-stmt -> while ( expression ) statement                                                   
return-stmt -> return return-stmt`                                                                  
return-stmt` -> ; | expression ;      
expression ->  NUM term` additive-expression` simple-expression` | ( expression ) term` additive-expression` simple-expression` | ID  expression`      
expression` -> = expression | [ expression ] expression`` | term` additive-expression` simple-expression`  | ( args ) term` additive-expression` simple-expression` 
expression`` -> = expression | term` additive-expression` simple-expression`  
simple-expression` -> relop additive-expression | empty                                          
relop -> <= | < | > | >= | == | !=                                                                
additive-expression -> term additive-expression`                                                    
additive-expression` -> addop term additive-expression` | empty                                    
addop -> + | -                                                                                     
term -> factor term`                                                                               
term` -> mulop factor term` | empty                                                                
mulop -> * | /                                                                                     
factor -> ( expression ) | ID factor` | NUM    
factor` -> [ expression ] | empty | ( args )                                                    
args -> arg-list | empty                                                                           
arg-list -> expression arg-list`                                                                    
arg-list` -> , expression arg-list` | empty    