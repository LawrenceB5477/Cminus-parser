--- fixed grammar --- 

* program -> declaration-list                                                                         { int void }                            { $ }
* declaration-list -> declaration declaration-list`                                                   { int void }                            { $ }
* declaration-list` -> declaration declaration-list` | empty                                          { int void empty }                      { $ }
* declaration -> type-specifier ID declaration`                                                       { int void }                            { int void $ } 
* declaration` -> var-declaration` | ( params ) compound-stmt                                         { ( ; [ }                               { int void $ }
* var-declaration -> type-specifier ID var-declaration`                                               { int void }                            { int void }
* var-declaration` -> ; | [ NUM ] ;                                                                   { ; [ }                                 { int void $ }
* type-specifier -> int | void                                                                        { int void }                            { ID }
* params -> int ID param` param-list` | void params`                                                  { int void }                            { ) }
* params` -> ID param` param-list` | empty                                                            { ID empty }                            { ) }
* param-list` -> , type-specifier ID param` param-list` | empty                                       { , empty }                             { ) }
* param` -> [ ] | empty                                                                               { [ empty }                             { , ) }
* compound-stmt -> { local-declarations statement-list }                                              { { }                                   { } }
* local-declarations -> var-declaration local-declarations | empty                                    { int void }                            { NUM ID ( ; { if while return } }
* statement-list -> statement statement-list | empty                                                    { NUM ID ( ; { if while return empty }  { } }
* statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt          { NUM ID ( ; { if while return }        { NUM ID ( ; { if while return } }
* expression-stmt -> expression ; | ;                                                                   { NUM ID ( ; }                          { NUM ID ( ; { if while return } }
* selection-stmt -> if ( expression ) statmement selection-stmt`                                      { if }                                  { NUM ID ( ; { if while return } }
* selection-stmt` -> else statement | empty                                                             { else empty }                          { NUM ID ( ; { if while return } }
* iteration-stmt -> while ( expression ) statement                                                    { while }                               { NUM ID ( ; { if while return } }
* return-stmt -> return return-stmt`                                                                  { return }                              { NUM ID ( ; { if while return } }
* return-stmt` -> ; | expression ;                                                                      { ; NUM (  ID }                         { NUM ID ( ; { if while return } }
* expression ->  NUM term` additive-expression` simple-expression` | ( expression ) term` additive-expression` simple-expression` | ID  expression`                    { NUM ( ID }          { , ) ; ] } 
* expression` -> = expression | [ expression ] expression`` | term` additive-expression` simple-expression`  | ( args ) term` additive-expression` simple-expression`  { = [ * / + - ( <= < > >= == != empty }   { , ) ; ] }
expression`` -> = expression | term` additive-expression` simple-expression`                        { = * / + - <= < > >= == != empty }                         { , ) ; ] }
* simple-expression` -> relop additive-expression | empty                                             { <= < > >= == != empty }               { , ) ; ] }
* relop -> <= | < | > | >= | == | !=                                                                  { <= < > >= == != }                     { NUM ID ( }
* additive-expression -> term additive-expression`                                                    { NUM ID ( }                            { , ) ; ] }
* additive-expression` -> addop term additive-expression` | empty                                     { + - empty }                           {  <= < > >= == != , ) ; ] NUM ( ID }
* addop -> + | -                                                                                      { + - }                                 { NUM ID ( }
* term -> factor term`                                                                                { NUM ID ( }                            { + - <= < > >= == != , ) ; ] NUM ( ID }                                                   
* term` -> mulop factor term` | empty                                                                 { * / empty }                           { + - <= < > >= == != , ) ; ] NUM ( ID }
* mulop -> * | /                                                                                      { * / }                                 { NUM ID ( }
* factor -> ( expression ) | ID factor` | NUM                                                         { NUM ID ( }                            { * / + - <= < > >= == != , ) ; ] NUM ( ID }
* factor` -> [ expression ] | empty | ( args )                                                        { [ ( empty }                           { * / + - <= < > >= == != , ) ; ] NUM ( ID }
* args -> arg-list | empty                                                                            { NUM ( ID }                            { ) }
* arg-list -> expression arg-list`                                                                    { NUM ( ID }                            { ) }
* arg-list` -> , expression arg-list` | empty                                                         { , empty }                             { ) }